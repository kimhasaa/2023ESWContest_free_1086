//main.h




/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.h
  * @brief          : Header for main.c file.
  *                   This file contains the common defines of the application.
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef __MAIN_H
#define __MAIN_H

#ifdef __cplusplus
extern "C" {
#endif

/* Includes ------------------------------------------------------------------*/
#include "stm32f4xx_hal.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Exported types ------------------------------------------------------------*/
/* USER CODE BEGIN ET */

/* USER CODE END ET */

/* Exported constants --------------------------------------------------------*/
/* USER CODE BEGIN EC */

/* USER CODE END EC */

/* Exported macro ------------------------------------------------------------*/
/* USER CODE BEGIN EM */

/* USER CODE END EM */

/* Exported functions prototypes ---------------------------------------------*/
void Error_Handler(void);

/* USER CODE BEGIN EFP */

/* USER CODE END EFP */

/* Private defines -----------------------------------------------------------*/
#define Right_Pin GPIO_PIN_5
#define Right_GPIO_Port GPIOA
#define Left_Pin GPIO_PIN_6
#define Left_GPIO_Port GPIOA
#define Stop_Pin GPIO_PIN_7
#define Stop_GPIO_Port GPIOA
#define S_L_Drive_Pin GPIO_PIN_7
#define S_L_Drive_GPIO_Port GPIOE
#define S_L_Direct_Pin GPIO_PIN_8
#define S_L_Direct_GPIO_Port GPIOE
#define F_L_Direct_Pin GPIO_PIN_10
#define F_L_Direct_GPIO_Port GPIOE
#define F_L_Drive_Pin GPIO_PIN_12
#define F_L_Drive_GPIO_Port GPIOE
#define S_R_Direct_Pin GPIO_PIN_14
#define S_R_Direct_GPIO_Port GPIOE
#define S_R_Drive_Pin GPIO_PIN_15
#define S_R_Drive_GPIO_Port GPIOE
#define F_R_Direct_Pin GPIO_PIN_10
#define F_R_Direct_GPIO_Port GPIOB
#define F_R_Drive_Pin GPIO_PIN_11
#define F_R_Drive_GPIO_Port GPIOB
#define Aligninput_Pin GPIO_PIN_14
#define Aligninput_GPIO_Port GPIOD
#define Alignoutput_Pin GPIO_PIN_15
#define Alignoutput_GPIO_Port GPIOD
#define Go_Pin GPIO_PIN_8
#define Go_GPIO_Port GPIOB
#define Back_Pin GPIO_PIN_9
#define Back_GPIO_Port GPIOB
/* USER CODE BEGIN Private defines */

/* USER CODE END Private defines */

#ifdef __cplusplus
}
#endif

#endif /* __MAIN_H */




//main.c




/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (HAL_GPIO_ReadPin(Go_GPIO_Port, Go_Pin) == GPIO_PIN_SET) { // 전진
	         //방향설정
	         HAL_GPIO_WritePin(F_R_Direct_GPIO_Port, F_R_Direct_Pin,
	               GPIO_PIN_SET);
	         HAL_GPIO_WritePin(S_R_Direct_GPIO_Port, S_R_Direct_Pin,
	               GPIO_PIN_SET);
	         HAL_GPIO_WritePin(F_L_Direct_GPIO_Port, F_L_Direct_Pin,
	               GPIO_PIN_RESET);
	         HAL_GPIO_WritePin(S_L_Direct_GPIO_Port, S_L_Direct_Pin,
	               GPIO_PIN_RESET);

	         //구동 설정
	         HAL_GPIO_WritePin(F_R_Drive_GPIO_Port, F_R_Drive_Pin,
	               GPIO_PIN_RESET);
	         HAL_GPIO_WritePin(S_R_Drive_GPIO_Port, S_R_Drive_Pin,
	               GPIO_PIN_RESET); // 바퀴구동
	         HAL_GPIO_WritePin(F_L_Drive_GPIO_Port, F_L_Drive_Pin,
	               GPIO_PIN_RESET);
	        HAL_GPIO_WritePin(GPIOE, 7,
	               GPIO_PIN_RESET); // 바퀴구동
	         HAL_Delay(100);
	      }
	      if (HAL_GPIO_ReadPin(Back_GPIO_Port, Back_Pin) == GPIO_PIN_SET) { // 후진
	         //방향설정
	         HAL_GPIO_WritePin(F_R_Direct_GPIO_Port, F_R_Direct_Pin,
	               GPIO_PIN_RESET);
	         HAL_GPIO_WritePin(S_R_Direct_GPIO_Port, S_R_Direct_Pin,
	               GPIO_PIN_RESET);
	         HAL_GPIO_WritePin(F_L_Direct_GPIO_Port, F_L_Direct_Pin,
	               GPIO_PIN_SET);
	         HAL_GPIO_WritePin(S_L_Direct_GPIO_Port, S_L_Direct_Pin,
	               GPIO_PIN_SET);

	         //구동 설정
	         HAL_GPIO_WritePin(F_R_Drive_GPIO_Port, F_R_Drive_Pin,
	               GPIO_PIN_RESET);
	         HAL_GPIO_WritePin(S_R_Drive_GPIO_Port, S_R_Drive_Pin,
	               GPIO_PIN_RESET); // 바퀴구동
	         HAL_GPIO_WritePin(F_L_Drive_GPIO_Port, F_L_Drive_Pin,
	               GPIO_PIN_RESET);
	         HAL_GPIO_WritePin(GPIOE, 7,
	               GPIO_PIN_RESET); // 바퀴구동
	         HAL_Delay(100);
	      }
	      if (HAL_GPIO_ReadPin(Left_GPIO_Port, Left_Pin) == GPIO_PIN_SET) { // 좌회전
	         //방향설정
	         HAL_GPIO_WritePin(F_R_Direct_GPIO_Port, F_R_Direct_Pin,
	               GPIO_PIN_SET);
	         HAL_GPIO_WritePin(S_R_Direct_GPIO_Port, S_R_Direct_Pin,
	               GPIO_PIN_SET);
	         HAL_GPIO_WritePin(F_L_Direct_GPIO_Port, F_L_Direct_Pin,
	               GPIO_PIN_SET);
	         HAL_GPIO_WritePin(S_L_Direct_GPIO_Port, S_L_Direct_Pin,
	               GPIO_PIN_SET);

	         //구동 설정
	         HAL_GPIO_WritePin(F_R_Drive_GPIO_Port, F_R_Drive_Pin,
	               GPIO_PIN_RESET);
	         HAL_GPIO_WritePin(S_R_Drive_GPIO_Port, S_R_Drive_Pin,
	               GPIO_PIN_RESET); // 바퀴구동
	         HAL_GPIO_WritePin(F_L_Drive_GPIO_Port, F_L_Drive_Pin,
	               GPIO_PIN_RESET);
	         HAL_GPIO_WritePin(GPIOE, 7,
	               GPIO_PIN_RESET); // 바퀴구동
	         HAL_Delay(2700);
	         HAL_GPIO_WritePin(F_R_Drive_GPIO_Port, F_R_Drive_Pin,
	               GPIO_PIN_SET);
	         HAL_GPIO_WritePin(S_R_Drive_GPIO_Port, S_R_Drive_Pin,
	               GPIO_PIN_SET); // 바퀴구동
	         HAL_GPIO_WritePin(F_L_Drive_GPIO_Port, F_L_Drive_Pin,
	               GPIO_PIN_SET);
	         HAL_GPIO_WritePin(GPIOE, 7,
	               GPIO_PIN_SET); // 바퀴구동
	         HAL_Delay(2700);


	      }

	      if (HAL_GPIO_ReadPin(Right_GPIO_Port, Right_Pin) == GPIO_PIN_SET) { // 우회전
	         //방향설정
	         HAL_GPIO_WritePin(F_R_Direct_GPIO_Port, F_R_Direct_Pin,
	               GPIO_PIN_RESET);
	         HAL_GPIO_WritePin(S_R_Direct_GPIO_Port, S_R_Direct_Pin,
	               GPIO_PIN_RESET);
	         HAL_GPIO_WritePin(F_L_Direct_GPIO_Port, F_L_Direct_Pin,
	               GPIO_PIN_RESET);
	         HAL_GPIO_WritePin(S_L_Direct_GPIO_Port, S_L_Direct_Pin,
	               GPIO_PIN_RESET);

	         //구동 설정
	         HAL_GPIO_WritePin(F_R_Drive_GPIO_Port, F_R_Drive_Pin,
	               GPIO_PIN_RESET);
	         HAL_GPIO_WritePin(S_R_Drive_GPIO_Port, S_R_Drive_Pin,
	               GPIO_PIN_RESET); // 바퀴구동
	         HAL_GPIO_WritePin(F_L_Drive_GPIO_Port, F_L_Drive_Pin,
	               GPIO_PIN_RESET);
	         HAL_GPIO_WritePin(GPIOE, 7,
	               GPIO_PIN_RESET); // 바퀴구동
	         HAL_Delay(2700);
	      }
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, S_L_Drive_Pin|S_L_Direct_Pin|F_L_Direct_Pin|F_L_Drive_Pin
                          |S_R_Direct_Pin|S_R_Drive_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, F_R_Direct_Pin|F_R_Drive_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Alignoutput_GPIO_Port, Alignoutput_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Right_Pin Left_Pin Stop_Pin */
  GPIO_InitStruct.Pin = Right_Pin|Left_Pin|Stop_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : S_L_Drive_Pin S_L_Direct_Pin F_L_Direct_Pin F_L_Drive_Pin
                           S_R_Direct_Pin S_R_Drive_Pin */
  GPIO_InitStruct.Pin = S_L_Drive_Pin|S_L_Direct_Pin|F_L_Direct_Pin|F_L_Drive_Pin
                          |S_R_Direct_Pin|S_R_Drive_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pins : F_R_Direct_Pin F_R_Drive_Pin */
  GPIO_InitStruct.Pin = F_R_Direct_Pin|F_R_Drive_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : Aligninput_Pin */
  GPIO_InitStruct.Pin = Aligninput_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(Aligninput_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : Alignoutput_Pin */
  GPIO_InitStruct.Pin = Alignoutput_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(Alignoutput_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : Go_Pin Back_Pin */
  GPIO_InitStruct.Pin = Go_Pin|Back_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */